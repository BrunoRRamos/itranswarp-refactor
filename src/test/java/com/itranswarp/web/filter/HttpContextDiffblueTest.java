package com.itranswarp.web.filter;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import com.itranswarp.model.User;
import jakarta.servlet.DispatcherType;
import jakarta.servlet.ServletContext;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.SessionCookieConfig;
import jakarta.servlet.SessionTrackingMode;
import jakarta.servlet.http.HttpServletMapping;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.Part;
import java.io.IOException;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.Set;
import org.apache.catalina.connector.CoyoteOutputStream;
import org.apache.catalina.connector.ResponseFacade;
import org.junit.jupiter.api.Test;
import org.springframework.mock.web.MockHttpServletMapping;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpSession;
import org.springframework.mock.web.MockServletContext;
import org.springframework.mock.web.MockSessionCookieConfig;

class HttpContextDiffblueTest {
  /**
   * Method under test:
   * {@link HttpContext#HttpContext(User, HttpServletRequest, HttpServletResponse, String)}
   */
  @Test
  void testNewHttpContext() throws ServletException, IOException, MissingResourceException {
    // Arrange
    User user = new User();
    MockHttpServletRequest request = new MockHttpServletRequest();

    // Act
    HttpContext actualHttpContext = new HttpContext(user, request, new org.apache.catalina.connector.Response(),
        "https://example.org/example");
    actualHttpContext.close();

    // Assert
    HttpServletRequest httpServletRequest = actualHttpContext.request;
    Collection<Part> parts = httpServletRequest.getParts();
    assertTrue(parts instanceof List);
    HttpServletResponse httpServletResponse = actualHttpContext.response;
    ServletOutputStream outputStream = httpServletResponse.getOutputStream();
    assertTrue(outputStream instanceof CoyoteOutputStream);
    assertTrue(httpServletResponse instanceof org.apache.catalina.connector.Response);
    HttpServletResponse response = ((org.apache.catalina.connector.Response) httpServletResponse).getResponse();
    assertTrue(response instanceof ResponseFacade);
    HttpServletMapping httpServletMapping = httpServletRequest.getHttpServletMapping();
    assertTrue(httpServletMapping instanceof MockHttpServletMapping);
    assertTrue(httpServletRequest instanceof MockHttpServletRequest);
    HttpSession session = httpServletRequest.getSession();
    assertTrue(session instanceof MockHttpSession);
    ServletContext servletContext = httpServletRequest.getServletContext();
    assertTrue(servletContext instanceof MockServletContext);
    SessionCookieConfig sessionCookieConfig = servletContext.getSessionCookieConfig();
    assertTrue(sessionCookieConfig instanceof MockSessionCookieConfig);
    assertEquals("", servletContext.getContextPath());
    assertEquals("", httpServletRequest.getProtocolRequestId());
    assertEquals("", httpServletRequest.getRequestId());
    assertEquals("", httpServletMapping.getMatchValue());
    assertEquals("", httpServletMapping.getPattern());
    assertEquals("", httpServletMapping.getServletName());
    assertEquals("", httpServletRequest.getContextPath());
    assertEquals("", httpServletRequest.getMethod());
    assertEquals("", httpServletRequest.getRequestURI());
    assertEquals("", httpServletRequest.getServletPath());
    Locale locale = httpServletRequest.getLocale();
    assertEquals("", locale.getCountry());
    assertEquals("", locale.getDisplayCountry());
    assertEquals("", locale.getDisplayScript());
    assertEquals("", locale.getDisplayVariant());
    assertEquals("", locale.getISO3Country());
    assertEquals("", locale.getScript());
    assertEquals("", locale.getVariant());
    assertEquals("", actualHttpContext.path);
    assertEquals("HTTP/1.1", httpServletRequest.getProtocol());
    assertEquals("MockServletContext", servletContext.getServerInfo());
    assertEquals("MockServletContext", servletContext.getServletContextName());
    assertEquals("default", ((MockServletContext) servletContext).getDefaultServletName());
    assertEquals("en", locale.getLanguage());
    assertEquals("eng", locale.getISO3Language());
    assertEquals("http", httpServletRequest.getScheme());
    assertEquals("http", actualHttpContext.scheme);
    assertEquals("http://localhost", httpServletRequest.getRequestURL().toString());
    assertEquals("http://localhost", actualHttpContext.url);
    assertEquals("https://example.org/example", actualHttpContext.ip);
    assertEquals("inglês", locale.getDisplayLanguage());
    assertEquals("inglês", locale.getDisplayName());
    assertEquals("localhost", httpServletRequest.getLocalName());
    assertEquals("localhost", httpServletRequest.getRemoteHost());
    assertEquals("localhost", httpServletRequest.getServerName());
    assertEquals("localhost", actualHttpContext.host);
    assertNull(((MockHttpServletRequest) httpServletRequest).getContentAsByteArray());
    assertNull(httpServletRequest.getCookies());
    User user2 = actualHttpContext.user;
    assertNull(user2.role);
    assertNull(httpServletRequest.getAsyncContext());
    assertNull(httpServletMapping.getMappingMatch());
    assertNotNull(servletContext.getClassLoader());
    assertNull(servletContext.getRequestCharacterEncoding());
    assertNull(servletContext.getResponseCharacterEncoding());
    assertNull(httpServletRequest.getCharacterEncoding());
    assertNull(httpServletRequest.getContentType());
    assertNull(sessionCookieConfig.getComment());
    assertNull(sessionCookieConfig.getDomain());
    assertNull(sessionCookieConfig.getName());
    assertNull(sessionCookieConfig.getPath());
    assertNull(httpServletRequest.getAuthType());
    assertNull(httpServletRequest.getPathInfo());
    assertNull(httpServletRequest.getPathTranslated());
    assertNull(httpServletRequest.getQueryString());
    assertNull(httpServletRequest.getRemoteUser());
    assertNull(httpServletRequest.getRequestedSessionId());
    assertNull(user2.email);
    assertNull(user2.imageUrl);
    assertNull(user2.name);
    assertNull(httpServletRequest.getUserPrincipal());
    assertNull(((org.apache.catalina.connector.Response) httpServletResponse).getRequest());
    assertNull(((org.apache.catalina.connector.Response) httpServletResponse).getCoyoteResponse());
    assertEquals(-1, httpServletRequest.getContentLength());
    assertEquals(-1, sessionCookieConfig.getMaxAge());
    assertEquals(-1L, httpServletRequest.getContentLengthLong());
    assertEquals(0, servletContext.getSessionTimeout());
    assertEquals(0, session.getMaxInactiveInterval());
    assertEquals(0L, ((org.apache.catalina.connector.Response) httpServletResponse).getContentWritten());
    assertEquals(0L, ((ResponseFacade) response).getContentWritten());
    assertEquals(0L, user2.createdAt);
    assertEquals(0L, user2.id);
    assertEquals(0L, user2.updatedAt);
    assertEquals(0L, user2.version);
    assertEquals(0L, user2.lockedUntil);
    assertEquals(1, servletContext.getEffectiveMinorVersion());
    assertEquals(1, servletContext.getMinorVersion());
    assertEquals(3, servletContext.getEffectiveMajorVersion());
    assertEquals(3, servletContext.getMajorVersion());
    Set<SessionTrackingMode> defaultSessionTrackingModes = servletContext.getDefaultSessionTrackingModes();
    assertEquals(3, defaultSessionTrackingModes.size());
    assertEquals(80, httpServletRequest.getLocalPort());
    assertEquals(80, httpServletRequest.getRemotePort());
    assertEquals(80, httpServletRequest.getServerPort());
    assertEquals(8192, response.getBufferSize());
    assertEquals(8192, httpServletResponse.getBufferSize());
    assertEquals(DispatcherType.REQUEST, httpServletRequest.getDispatcherType());
    assertFalse(httpServletRequest.isAsyncStarted());
    assertFalse(httpServletRequest.isAsyncSupported());
    assertFalse(sessionCookieConfig.isHttpOnly());
    assertFalse(sessionCookieConfig.isSecure());
    assertFalse(httpServletRequest.isRequestedSessionIdFromURL());
    assertFalse(httpServletRequest.isTrailerFieldsReady());
    assertFalse(locale.hasExtensions());
    assertFalse(((org.apache.catalina.connector.Response) httpServletResponse).isClosed());
    assertFalse(((org.apache.catalina.connector.Response) httpServletResponse).isSuspended());
    assertFalse(((ResponseFacade) response).isFinished());
    assertFalse(((MockHttpSession) session).isInvalid());
    assertTrue(httpServletRequest.isRequestedSessionIdFromCookie());
    assertTrue(httpServletRequest.isRequestedSessionIdValid());
    assertTrue(parts.isEmpty());
    assertTrue(((org.apache.catalina.connector.Response) httpServletResponse).getCookies().isEmpty());
    assertTrue(httpServletRequest.getParameterMap().isEmpty());
    assertTrue(sessionCookieConfig.getAttributes().isEmpty());
    Map<String, String> trailerFields = httpServletRequest.getTrailerFields();
    assertTrue(trailerFields.isEmpty());
    assertTrue(defaultSessionTrackingModes.contains(SessionTrackingMode.COOKIE));
    assertTrue(defaultSessionTrackingModes.contains(SessionTrackingMode.SSL));
    assertTrue(defaultSessionTrackingModes.contains(SessionTrackingMode.URL));
    Set<Character> extensionKeys = locale.getExtensionKeys();
    assertTrue(extensionKeys.isEmpty());
    assertTrue(((MockServletContext) servletContext).getDeclaredRoles().isEmpty());
    assertTrue(((MockHttpServletRequest) httpServletRequest).isActive());
    assertSame(defaultSessionTrackingModes, servletContext.getEffectiveSessionTrackingModes());
    assertSame(trailerFields, servletContext.getFilterRegistrations());
    assertSame(trailerFields, servletContext.getServletRegistrations());
    assertSame(extensionKeys, locale.getUnicodeLocaleAttributes());
    assertSame(extensionKeys, locale.getUnicodeLocaleKeys());
    assertSame(outputStream, response.getOutputStream());
    assertSame(servletContext, session.getServletContext());
  }
}
