package com.itranswarp.redis;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import com.redis.lettucemod.RedisModulesClient;
import io.lettuce.core.ClientOptions;
import io.lettuce.core.SocketOptions;
import io.lettuce.core.SslOptions;
import io.lettuce.core.TimeoutOptions;
import io.lettuce.core.event.DefaultEventBus;
import io.lettuce.core.event.DefaultEventPublisherOptions;
import io.lettuce.core.event.Event;
import io.lettuce.core.event.EventBus;
import io.lettuce.core.event.EventPublisherOptions;
import io.lettuce.core.protocol.ProtocolVersion;
import io.lettuce.core.resource.ClientResources;
import io.lettuce.core.resource.DefaultClientResources;
import io.lettuce.core.resource.DefaultEventLoopGroupProvider;
import io.netty.handler.ssl.SslProvider;
import io.netty.resolver.DefaultAddressResolverGroup;
import io.netty.util.HashedWheelTimer;
import io.netty.util.Timer;
import io.netty.util.concurrent.DefaultEventExecutor;
import io.netty.util.concurrent.DefaultEventExecutorGroup;
import io.netty.util.concurrent.DefaultPromise;
import io.netty.util.concurrent.EventExecutor;
import io.netty.util.concurrent.EventExecutorGroup;
import io.netty.util.concurrent.Future;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import reactor.core.publisher.Flux;
import reactor.core.publisher.ParallelFlux;
import reactor.util.function.Tuple2;

@ContextConfiguration(classes = {RedisClientFactory.class})
@ExtendWith(SpringExtension.class)
class RedisClientFactoryDiffblueTest {
  @Autowired
  private RedisClientFactory redisClientFactory;

  /**
   * Method under test: {@link RedisClientFactory#getObject()}
   */
  @Test
  void testGetObject() throws Exception {
    // Arrange and Act
    RedisModulesClient actualObject = redisClientFactory.getObject();

    // Assert
    ClientResources resources = actualObject.getResources();
    EventBus eventBusResult = resources.eventBus();
    assertTrue(eventBusResult instanceof DefaultEventBus);
    EventPublisherOptions commandLatencyPublisherOptionsResult = resources.commandLatencyPublisherOptions();
    assertTrue(commandLatencyPublisherOptionsResult instanceof DefaultEventPublisherOptions);
    assertTrue(resources instanceof DefaultClientResources);
    assertTrue(resources.eventLoopGroupProvider() instanceof DefaultEventLoopGroupProvider);
    assertTrue(resources.addressResolverGroup() instanceof DefaultAddressResolverGroup);
    Timer timerResult = resources.timer();
    assertTrue(timerResult instanceof HashedWheelTimer);
    EventExecutorGroup eventExecutorGroupResult = resources.eventExecutorGroup();
    EventExecutor nextResult = eventExecutorGroupResult.next();
    assertTrue(nextResult instanceof DefaultEventExecutor);
    assertTrue(eventExecutorGroupResult instanceof DefaultEventExecutorGroup);
    Future<Boolean> shutdownResult = resources.shutdown();
    assertTrue(shutdownResult instanceof DefaultPromise);
    Future<?> terminationFutureResult = eventExecutorGroupResult.terminationFuture();
    assertTrue(terminationFutureResult instanceof DefaultPromise);
    Future<?> terminationFutureResult2 = nextResult.terminationFuture();
    assertTrue(terminationFutureResult2 instanceof DefaultPromise);
    ClientOptions options = actualObject.getOptions();
    assertEquals("UTF-8", options.getScriptCharset().name());
    SslOptions sslOptions = options.getSslOptions();
    assertNull(sslOptions.getCipherSuites());
    assertNull(sslOptions.getProtocols());
    TimeoutOptions timeoutOptions = options.getTimeoutOptions();
    assertNull(timeoutOptions.getSource());
    assertNull(options.getConfiguredProtocolVersion());
    assertNull(terminationFutureResult.get());
    assertNull(terminationFutureResult2.get());
    assertNull(sslOptions.getKeystore());
    assertNull(sslOptions.getTruststore());
    Flux<Event> getResult = eventBusResult.get();
    Flux<List<Event>> bufferResult = getResult.buffer();
    assertEquals(-1, bufferResult.getPrefetch());
    Flux<List<List<Event>>> bufferResult2 = bufferResult.buffer();
    assertEquals(-1, bufferResult2.getPrefetch());
    assertEquals(-1, bufferResult2.buffer().getPrefetch());
    Flux<Event> cacheResult = getResult.cache();
    Flux<List<Event>> bufferResult3 = cacheResult.buffer();
    assertEquals(-1, bufferResult3.buffer().getPrefetch());
    Flux<Event> checkpointResult = getResult.checkpoint();
    Flux<List<Event>> bufferResult4 = checkpointResult.buffer();
    assertEquals(-1, bufferResult4.buffer().getPrefetch());
    assertEquals(-1, bufferResult3.getPrefetch());
    Flux<List<Event>> cacheResult2 = bufferResult.cache();
    assertEquals(-1, cacheResult2.buffer().getPrefetch());
    Flux<Event> cacheResult3 = cacheResult.cache();
    assertEquals(-1, cacheResult3.buffer().getPrefetch());
    Flux<Event> cacheResult4 = checkpointResult.cache();
    assertEquals(-1, cacheResult4.buffer().getPrefetch());
    assertEquals(-1, bufferResult4.getPrefetch());
    Flux<List<Event>> checkpointResult2 = bufferResult.checkpoint();
    assertEquals(-1, checkpointResult2.buffer().getPrefetch());
    Flux<Event> checkpointResult3 = cacheResult.checkpoint();
    assertEquals(-1, checkpointResult3.buffer().getPrefetch());
    Flux<Event> checkpointResult4 = checkpointResult.checkpoint();
    assertEquals(-1, checkpointResult4.buffer().getPrefetch());
    Flux<Tuple2<Long, Event>> elapsedResult = getResult.elapsed();
    assertEquals(-1, elapsedResult.buffer().getPrefetch());
    Flux<Tuple2<Long, List<Event>>> elapsedResult2 = bufferResult.elapsed();
    assertEquals(-1, elapsedResult2.buffer().getPrefetch());
    Flux<Tuple2<Long, Event>> elapsedResult3 = cacheResult.elapsed();
    assertEquals(-1, elapsedResult3.buffer().getPrefetch());
    Flux<Tuple2<Long, Event>> elapsedResult4 = checkpointResult.elapsed();
    assertEquals(-1, elapsedResult4.buffer().getPrefetch());
    Flux<Tuple2<Long, Event>> timestampResult = getResult.timestamp();
    assertEquals(-1, timestampResult.buffer().getPrefetch());
    Flux<Tuple2<Long, List<Event>>> timestampResult2 = bufferResult.timestamp();
    assertEquals(-1, timestampResult2.buffer().getPrefetch());
    Flux<Tuple2<Long, Event>> timestampResult3 = cacheResult.timestamp();
    assertEquals(-1, timestampResult3.buffer().getPrefetch());
    Flux<Tuple2<Long, Event>> timestampResult4 = checkpointResult.timestamp();
    assertEquals(-1, timestampResult4.buffer().getPrefetch());
    assertEquals(-1, checkpointResult.getPrefetch());
    assertEquals(-1, checkpointResult2.getPrefetch());
    assertEquals(-1, bufferResult2.checkpoint().getPrefetch());
    assertEquals(-1, bufferResult3.checkpoint().getPrefetch());
    assertEquals(-1, bufferResult4.checkpoint().getPrefetch());
    assertEquals(-1, checkpointResult3.getPrefetch());
    assertEquals(-1, cacheResult2.checkpoint().getPrefetch());
    assertEquals(-1, cacheResult3.checkpoint().getPrefetch());
    assertEquals(-1, cacheResult4.checkpoint().getPrefetch());
    assertEquals(-1, checkpointResult4.getPrefetch());
    assertEquals(-1, checkpointResult2.checkpoint().getPrefetch());
    assertEquals(-1, checkpointResult3.checkpoint().getPrefetch());
    assertEquals(-1, checkpointResult4.checkpoint().getPrefetch());
    assertEquals(-1, elapsedResult.checkpoint().getPrefetch());
    assertEquals(-1, elapsedResult2.checkpoint().getPrefetch());
    assertEquals(-1, elapsedResult3.checkpoint().getPrefetch());
    assertEquals(-1, elapsedResult4.checkpoint().getPrefetch());
    assertEquals(-1, timestampResult.checkpoint().getPrefetch());
    assertEquals(-1, timestampResult2.checkpoint().getPrefetch());
    assertEquals(-1, timestampResult3.checkpoint().getPrefetch());
    assertEquals(-1, elapsedResult.getPrefetch());
    assertEquals(-1, elapsedResult2.getPrefetch());
    assertEquals(-1, bufferResult2.elapsed().getPrefetch());
    assertEquals(-1, bufferResult3.elapsed().getPrefetch());
    assertEquals(-1, bufferResult4.elapsed().getPrefetch());
    assertEquals(-1, elapsedResult3.getPrefetch());
    assertEquals(-1, cacheResult2.elapsed().getPrefetch());
    assertEquals(-1, cacheResult3.elapsed().getPrefetch());
    assertEquals(-1, cacheResult4.elapsed().getPrefetch());
    assertEquals(-1, elapsedResult4.getPrefetch());
    assertEquals(-1, checkpointResult2.elapsed().getPrefetch());
    assertEquals(-1, checkpointResult3.elapsed().getPrefetch());
    assertEquals(-1, checkpointResult4.elapsed().getPrefetch());
    assertEquals(-1, elapsedResult.elapsed().getPrefetch());
    assertEquals(-1, elapsedResult2.elapsed().getPrefetch());
    assertEquals(-1, elapsedResult3.elapsed().getPrefetch());
    assertEquals(-1, elapsedResult4.elapsed().getPrefetch());
    assertEquals(-1, timestampResult.elapsed().getPrefetch());
    assertEquals(-1, timestampResult2.elapsed().getPrefetch());
    assertEquals(-1, timestampResult3.elapsed().getPrefetch());
    assertEquals(-1, timestampResult.getPrefetch());
    assertEquals(-1, timestampResult2.getPrefetch());
    assertEquals(-1, bufferResult2.timestamp().getPrefetch());
    assertEquals(-1, bufferResult3.timestamp().getPrefetch());
    assertEquals(-1, bufferResult4.timestamp().getPrefetch());
    assertEquals(-1, timestampResult3.getPrefetch());
    assertEquals(-1, cacheResult2.timestamp().getPrefetch());
    assertEquals(-1, cacheResult3.timestamp().getPrefetch());
    assertEquals(-1, cacheResult4.timestamp().getPrefetch());
    assertEquals(-1, timestampResult4.getPrefetch());
    assertEquals(-1, checkpointResult2.timestamp().getPrefetch());
    assertEquals(-1, checkpointResult3.timestamp().getPrefetch());
    assertEquals(-1, checkpointResult4.timestamp().getPrefetch());
    assertEquals(-1, elapsedResult.timestamp().getPrefetch());
    assertEquals(-1, elapsedResult2.timestamp().getPrefetch());
    assertEquals(-1, elapsedResult3.timestamp().getPrefetch());
    assertEquals(-1, elapsedResult4.timestamp().getPrefetch());
    assertEquals(-1, timestampResult.timestamp().getPrefetch());
    assertEquals(-1, timestampResult2.timestamp().getPrefetch());
    assertEquals(-1, timestampResult3.timestamp().getPrefetch());
    assertEquals(0, options.getBufferUsageRatio());
    assertEquals(0, sslOptions.getKeystorePassword().length);
    assertEquals(0, sslOptions.getTruststorePassword().length);
    assertEquals(0L, ((HashedWheelTimer) timerResult).pendingTimeouts());
    SocketOptions socketOptions = options.getSocketOptions();
    assertEquals(10000000000L, socketOptions.getConnectTimeout().toNanos());
    assertEquals(10000000000L, sslOptions.getHandshakeTimeout().toNanos());
    assertEquals(1000000000L, actualObject.getDefaultTimeout().toNanos());
    assertEquals(256, getResult.getPrefetch());
    ParallelFlux<Event> parallelResult = getResult.parallel();
    assertEquals(256, parallelResult.sequential().getPrefetch());
    ParallelFlux<List<Event>> parallelResult2 = bufferResult.parallel();
    assertEquals(256, parallelResult2.sequential().getPrefetch());
    ParallelFlux<Event> parallelResult3 = cacheResult.parallel();
    assertEquals(256, parallelResult3.sequential().getPrefetch());
    ParallelFlux<Event> parallelResult4 = checkpointResult.parallel();
    assertEquals(256, parallelResult4.sequential().getPrefetch());
    assertEquals(256, parallelResult.getPrefetch());
    assertEquals(256, parallelResult2.getPrefetch());
    assertEquals(256, bufferResult2.parallel().getPrefetch());
    assertEquals(256, bufferResult3.parallel().getPrefetch());
    assertEquals(256, bufferResult4.parallel().getPrefetch());
    assertEquals(256, parallelResult3.getPrefetch());
    assertEquals(256, cacheResult2.parallel().getPrefetch());
    assertEquals(256, cacheResult3.parallel().getPrefetch());
    assertEquals(256, cacheResult4.parallel().getPrefetch());
    assertEquals(256, parallelResult4.getPrefetch());
    assertEquals(256, checkpointResult2.parallel().getPrefetch());
    assertEquals(256, checkpointResult3.parallel().getPrefetch());
    assertEquals(256, checkpointResult4.parallel().getPrefetch());
    assertEquals(256, elapsedResult.parallel().getPrefetch());
    assertEquals(256, elapsedResult2.parallel().getPrefetch());
    assertEquals(256, elapsedResult3.parallel().getPrefetch());
    assertEquals(256, elapsedResult4.parallel().getPrefetch());
    assertEquals(256, timestampResult.parallel().getPrefetch());
    assertEquals(256, timestampResult2.parallel().getPrefetch());
    assertEquals(256, timestampResult3.parallel().getPrefetch());
    assertEquals(256, parallelResult.checkpoint().getPrefetch());
    assertEquals(256, parallelResult2.checkpoint().getPrefetch());
    assertEquals(256, parallelResult3.checkpoint().getPrefetch());
    assertEquals(256, parallelResult4.checkpoint().getPrefetch());
    assertEquals(600000000000L, commandLatencyPublisherOptionsResult.eventEmitInterval().toNanos());
    SocketOptions.KeepAliveOptions keepAlive = socketOptions.getKeepAlive();
    assertEquals(7200000000000L, keepAlive.getIdle().toNanos());
    assertEquals(75000000000L, keepAlive.getInterval().toNanos());
    assertEquals(9, keepAlive.getCount());
    assertEquals(ClientOptions.DisconnectedBehavior.DEFAULT, options.getDisconnectedBehavior());
    assertEquals(ProtocolVersion.RESP3, options.getProtocolVersion());
    assertEquals(SslProvider.JDK, sslOptions.getSslProvider());
    assertFalse(options.isCancelCommandsOnReconnectFailure());
    assertFalse(options.isPublishOnScheduler());
    assertFalse(options.isSuspendReconnectOnProtocolFailure());
    assertFalse(socketOptions.isKeepAlive());
    assertFalse(keepAlive.isEnabled());
    assertFalse(timeoutOptions.isApplyConnectionTimeout());
    assertFalse(timeoutOptions.isTimeoutCommands());
    assertFalse(resources.commandLatencyRecorder().isEnabled());
    assertTrue(options.isAutoReconnect());
    assertTrue(options.isPingBeforeActivateConnection());
    assertTrue(socketOptions.isTcpNoDelay());
    assertTrue(shutdownResult.get());
    assertTrue(terminationFutureResult.isDone());
    assertEquals(Integer.MAX_VALUE, options.getRequestQueueSize());
    assertEquals(Integer.MAX_VALUE, cacheResult.getPrefetch());
    assertEquals(Integer.MAX_VALUE, cacheResult2.getPrefetch());
    assertEquals(Integer.MAX_VALUE, bufferResult2.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, bufferResult3.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, bufferResult4.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, cacheResult3.getPrefetch());
    assertEquals(Integer.MAX_VALUE, cacheResult2.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, cacheResult3.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, cacheResult4.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, cacheResult4.getPrefetch());
    assertEquals(Integer.MAX_VALUE, checkpointResult2.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, checkpointResult3.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, checkpointResult4.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, elapsedResult.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, elapsedResult2.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, elapsedResult3.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, elapsedResult4.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, timestampResult.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, timestampResult2.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, timestampResult3.cache().getPrefetch());
    assertEquals(Integer.MAX_VALUE, timestampResult4.cache().getPrefetch());
    assertSame(eventExecutorGroupResult, nextResult.parent());
  }

  /**
   * Method under test: {@link RedisClientFactory#getObjectType()}
   */
  @Test
  void testGetObjectType() {
    // Arrange and Act
    Class<?> actualObjectType = (new RedisClientFactory()).getObjectType();

    // Assert
    Class<RedisModulesClient> expectedObjectType = RedisModulesClient.class;
    assertEquals(expectedObjectType, actualObjectType);
  }
}
